steps:
  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'asia-south1-docker.pkg.dev/prj-visitor-connect-prod-goa/repo-visitor-connect-prod-as1-01/node-app:latest'
      - '.'

  # Step 2: Push the Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'asia-south1-docker.pkg.dev/prj-visitor-connect-prod-goa/repo-visitor-connect-prod-as1-01/node-app:latest'

  # Step 3: Trigger Cloud Deploy with inline Skaffold configuration
  - name: 'google/cloud-sdk:latest'
    id: Trigger Cloud Deploy
    entrypoint: 'sh'
    args:
      - -xe
      - -c
      - |
        gcloud config set deploy/region asia-south1
        gcloud deploy apply --file cloud-deploy/dev/pipeline.yaml
        gcloud deploy apply --file cloud-deploy/dev/target.yaml
        pwd 
        ls

        # Inline Skaffold configuration
        cat <<EOF > skaffold.yaml
        apiVersion: skaffold/v4beta7
        kind: Config
        metadata:
          name: node-app
        profiles:
        - name: prod
          manifests:
            rawYaml:
            - cloud-deploy/prod/prod.yaml
        deploy:
          cloudrun: {}
        EOF

        gcloud deploy releases create node-app-${SHORT_SHA}-$(date +%s) \
                            --delivery-pipeline=cdep-visitor-connect-prod-as1-01 \
                            --region=asia-south1
                        

  # Step to wait for 60 seconds
  - name: 'alpine:latest'
    entrypoint: 'sh'
    args:
      - '-c'
      - 'sleep 60'

  # Step 4: Check the status of the deployed service
  - name: 'google/cloud-sdk:latest'
    entrypoint: 'sh'
    args:
      - -xe
      - -c
      - |
        profile="crn-visitor-connect-prod-as1-node-admin"
        url=$(gcloud run services describe "$profile" --platform managed --region asia-south1 --format 'value(status.url)')

        # Use curl to get the HTTP response code
        response=$(curl -o /dev/null -s -w "%{http_code}\n" "$url")

        # Check the status code and take action
        if [ "$response" -eq 200 ]; then
          echo "Deployment successful! Service is healthy."
        elif [ "$response" -eq 500 ]; then
          echo "Deployment failed with status 500! Rolling back..."

          last_release=$(gcloud deploy releases list \
            --delivery-pipeline=cdep-visitor-connect-prod-as1-01 \
            --region=asia-south1 \
            --format="yaml(name)" | awk -F'/' '{split($0,a,"/"); print a[length(a)]}')

          # Rollback to the last successful release
          gcloud deploy targets rollback dev \
            --delivery-pipeline=cdep-visitor-connect-prod-as1-01 \
            --region="asia-south1" \
            --release="$last_release"
        else
          echo "Deployment failed with status $response! Exiting."
          exit 1
        fi

images:
  - 'asia-south1-docker.pkg.dev/prj-visitor-connect-prod-goa/repo-visitor-connect-prod-as1-01/node-app:latest'

logsBucket: 'gs://bkt-visitor-connect-prod-as1-cloudbuild-01'
